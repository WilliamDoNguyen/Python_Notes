print("Hello World!")
# print needs parenthesis followed by double or single quotes for a string

Concatenation:
# name = "Zen"
# print("My name is", name)

# name = "Zen"
# print("My name is " + name)

F-string Literals:
# first_name = "Zen"
# last_name = "Coder"
# age = 27
# print(f"My name is {first_name} {last_name} and I am {age} years old.")

string.format()
# first_name = "Zen"
# last_name = "Coder"
# age = 27
# print("My name is {} {} and I am {} years old.".format(first_name, last_name, age))
# # output: My name is Zen Coder and I am 27 years old.
# print("My name is {} {} and I am {} years old.".format(age, first_name, last_name))
# # output: My name is 27 Zen and I am Coder years old.

%-formatting
# hw = "Hello %s" % "world" 	# with literal values
# py = "I love Python %d" % 3
# print(hw, py)
# - output: Hello world I love Python 3
# name = "Zen"
# age = 27
# print("My name is %s and I'm %d" % (name, age))		# or with variables
# - output: My name is Zen and I'm 27

String Commands:
- string.upper(): returns a copy of the string with all the characters in uppercase.
- string.lower(): returns a copy of the string with all the characters in lowercase.
- string.count(substring): returns number of occurrences of substring in string.
- string.split(char): returns a list of values where string is split at the given character. Without a parameter the default split is at every space.
- string.find(substring): returns the index of the start of the first occurrence of substring within string.
- string.isalnum(): returns boolean depending on whether the string's length is > 0 and all characters are alphanumeric (letters and numbers only). Strings that include spaces and punctuation will return False for this method. Similar methods include .isalpha(), .isdigit(), .islower(), .isupper(), and so on. All return booleans.
- string.join(list): returns a string that is all strings within our set (in this case a list) concatenated.
- string.endswith(substring): returns a boolean based upon whether the last characters of string match substring.

Input:
# x = "Hello world"
# y = ["hello", "world", "bye", "world"]
# print(x.upper())
# print(x.lower())
# print(x.count('ell'))
# print(x.split('o'))
# print(x.find('world'))
# print(x.isalnum())
# print(x.isalpha())
# print(x.isdigit())
# print(x.islower())
# print(x.isupper())
# print(x.join(y))
# print(x.endswith('lo'))

Output:
# HELLO WORLD
# hello world
# 1
# ['Hell', ' w', 'rld']
# 6
# False
# False
# False
# False
# False
# helloHello worldworldHello worldbyeHello worldworld
# False


# def (functions)
# if, elif, else (conditional statements)
# for, while (loops)
# Class (classes)

pass statement:
# for where we need a block statement but don't have content to fill it with yet
# null operation

Tuples:
- A type of data that is immutable (can't be modified after its creation) and can hold a group of values.
- Tuples can contain mixed data types.
# dog = ('Bruce', 'cocker spaniel', 19, False)
# print(dog[0])		# output: Bruce
# dog[1] = 'dachshund'	# ERROR: cannot be modified ('tuple' object does not support item assignment)

Dictionaries:
# empty_dict = {}
# new_person = {'name': 'John', 'age': 38, 'weight': 160.2, 'has_glasses': False}
# new_person['name'] = 'Jack'	# updates if the key exists
# new_person['hobbies'] = ['climbing', 'coding']	# adds a key-value pair if the key doesn't exist
# print(new_person)
# - output: {'name': 'Jack', 'age': 38, 'weight': 160.2, 'has_glasses': False, 'hobbies': ['climbing', 'coding']}copy
# w = new_person.pop('weight')	# removes the specified key and returns the value
# print(w)		# output: 160.2
# print(new_person)
# - output: {'name': 'Jack', 'age': 38, 'has_glasses': False, 'hobbies': ['climbing', 'coding']}

Common functions:
type (print(type(2.6))) # output: 'float'
# output the data type

len
- print(len(new_person))		# output: 4 (the number of key-value pairs)
- print(len('Coding Dojo'))	    # output: 11

Type casting or explicit type conversion:
str(42)
# makes 42 a string data type

int("26")
# makes 26 into the literal 26 integer value

For Loops with Range:
- JavaScript
for (var x = 0; x < 10; x += 1){
    # code
}

- Python
for x in range(0, 10, 1):
    # code
// 0 = start value
// 10 = value to stop iterating at (exclusive of)
// 1 = iterator change
// : = the following code is part of this loop

# for x in range(0, 10, 1):
# for x in range(0, 10):	# increment of +1 is implied
# for x in range(10):	# increment of +1 and start at 0 is implied

For Loops through Lists:
my_list = ["abc", 123, "xyz"]
for i in range(0, len(my_list)):
    print(i, my_list[i])
# output: 0 abc, 1 123, 2 xyz

OR

for v in my_list:
    print(v)
# output: abc, 123, xyz

For Loops through Dictionaries:
my_dict = { "name": "Noelle", "language": "Python" }
for k in my_dict:
    print(k)
# output: name, language

**if we want the values of the dictionary**
my_dict = { "name": "Noelle", "language": "Python" }
for k in my_dict:
    print(my_dict[k])
# output: Noelle, Python

capitals = {"Washington":"Olympia","California":"Sacramento","Idaho":"Boise","Illinois":"Springfield","Texas":"Austin","Oklahoma":"Oklahoma City","Virginia":"Richmond"}
# another way to iterate through the keys
for key in capitals.keys():
     print(key)
# output: Washington, California, Idaho, Illinois, Texas, Oklahoma, Virginia
#to iterate through the values
for val in capitals.values():
     print(val)
# output: Olympia, Sacramento, Boise, Springfield, Austin, Oklahoma City, Richmond
#to iterate through both keys and values
for key, val in capitals.items():
     print(key, " = ", val)
# output: Washington = Olympia, California = Sacramento, Idaho = Boise, etc

While loops:
count = 0
while count < 5:
   print("looping - ", count)
   count += 1

## while <expression>:
    # Don't forget to do something to expression

Else in While loops:
y = 3
while y > 0:
    print(y)
    y = y - 1
else:
    print("Final else statement")
# if the condition is not met, the else statement kicks in

Break statement in loops:
# break statements exit the current loop

Continue statement in loops:
# The continue statement immediately returns control to the beginning of the loop.
# In other words, the continue statement rejects, or skips, all the remaining statements in
# the current iteration of the loop, and continues normal execution at the top of the loop.
i.e.
for val in "string":
    if val == "i":
        continue
    print(val)
# output: s, t, r, n, g
# notice, no i in the output, but the loop continued after the i

Functions:
- Syntax
# def add(a,b):	 # function name: 'add', parameters: a and b
#     x = a + b	 # process
#     return x	 # return value: x

Floor division:
# //

Default Parameters:
- def beCheerful(name='', repeat=2):		# set defaults when declaring the parameters
	print(f"good morning {name}\n" * repeat)
- beCheerful()				# output: good morning (repeated on 2 lines)
- beCheerful("tim")		        # output: good morning tim (repeated on 2 lines)
- beCheerful(name="john")			# output: good morning john (repeated on 2 lines)
- beCheerful(repeat=6)			# output: good morning (repeated on 6 lines)
- beCheerful(name="michael", repeat=5)	# output: good morning michael (repeated on 5 lines)
# NOTE: argument order doesn't matter if we are explicit when sending in our arguments!
- beCheerful(repeat=3, name="kb")		# output: good morning kb (repeated on 3 lines)

# no arguments are provided -- the defaults are used
# one unnamed argument provided -- provided value is used as the value for the first parameter, and the second parameter's default value is used
# one named argument provided -- provided value is used as the value of the parameter of the same name, and the other parameter's default value is used
# both unnamed arguments provided -- values assigned to parameters in order (i.e. what we've been doing up to this point)
# both named arguments provided -- values are assigned to associated parameter (and then order doesn't matter!)

Null value:
# None is the null value
# use is and is not to compar

Python Swap:
Javascript
# var arr = [1,3,5,7];
# var temp = arr[0];
# arr[0] = arr[1];
# arr[1] = temp;

Python
# arr = [1,3,5,7]
# arr[0], arr[1] = arr[1], arr[0]

CLASSES
Attributes:
class User:		# declare a class and give it name User
    def __init__(self):
        self.name = "Michael"
        self.email = "michael@codingdojo.com"
        self.account_balance = 0

# The first parameter of every method within a class will be self, and the class's attribute names are also indicated by self.
# self.<<attribute_name_of_your_choosing>>

# initiate new users:
guido = User()
monty = User()

class User:
    def __init__(self, name, email_address):# now our method has 2 parameters!
        self.name = name			# and we use the values passed in to set the name attribute
        self.email = email_address		# and the email attribute
        self.account_balance = 0		# the account balance is set to $0, so no need for a third parameter

guido = User("Guido van Rossum", "guido@python.com")
monty = User("Monty Python", "monty@python.com")
print(guido.name)	# output: Guido van Rossum
print(monty.name)	# output: Monty Python

# We can also set the values for our instance's attributes
guido.name = "Guido"
monty.name = "Monty"

class User:		# here's what we have so far
    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.account_balance = 0
    # adding the deposit method
    def make_deposit(self, amount):	# takes an argument that is the amount of the deposit
    	self.account_balance += amount	# the specific user's account increases by the amount of the value received
guido.make_deposit(100)
guido.make_deposit(200)
monty.make_deposit(50)
print(guido.account_balance)	# output: 300
print(monty.account_balance)	# output: 50

Chaining Methods:
guido.make_deposit(100).make_deposit(200).make_deposit(300).make_withdrawal(50).display_user_balance()
# call on guido just once and keep attaching new method calls to the end of the previous one
*** In order for this to work, each method must return self. ***

Association between Classes:
class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.account = BankAccount(int_rate=0.02, balance=0)	# added this line
# The BankAccount class should be in the same file as the User class, so the reference to it is recognized.
class User:
    def example_method(self):
        self.account.deposit(100)		# we can call the BankAccount instance's methods
    	print(self.account.balance)		# or access its attributes

Modules:
# Modules are simply Python files with the .py extension which implement a set of functions. Modules are imported using the import command.
# import the library
import urllib.request
response = urllib.request.urlopen("http://www.codingdojo.com")
html = response.read()
print(html)

Importing Own Modules:
# created a module called arithmetic.py in the same directory as calculations.py
import arithmetic
print(arithmetic.add(5, 8))
print(arithmetic.subtract(10, 5))
print(arithmetic.multiply(12, 6))

Packages:
# A module is a single file (or files) that is imported under one import. A package is a collection of modules in directories that give a package hierarchy.
#code
from my_package.subdirectory import my_functions

Writing Packages:
#If we create a directory called my_modules, which marks the package name, we can then create a module inside that package called test_module.

# To use the module test_module, we can import it in two ways:

import my_modules.test_module

# OR

import my_modules.test_module


Passing Multiple Arguments:
Splat Operator
def varargs(arg1, *args):
    print("Got ", arg1, " and ", args)
varargs("one") 			# output: Got one and ()
varargs("one", "two") 	        # output: Got one and ('two',)
varargs("one", "two", "three")  # output: Got one and ('two', 'three')

# iterating through tuple that has a splat Operator
def varargs(arg1, *args):
    for a in args:
    	print(a)
varargs("one", "two", "three") # output: two, three (on separate lines)

Inhertitance:
class RetirementAccount(BankAccount):
    def __init__(self, int_rate, is_roth, balance=0):
        self.int_rate = int_rate
        self.balance = balance
    	self.is_roth = is_roth

class BankAccount:
    def __init__(self, int_rate, balance=0):
        self.int_rate = int_rate
        self.balance = balance

class RetirementAccount(BankAccount):
    def __init__(self, int_rate, is_roth, balance=0):
    	super().__init__(int_rate, balance)
        self.is_roth = is_roth
# Utilize the key word (super)

class RetirementAccount(BankAccount):
    def __init__(self, int_rate, is_roth, balance=0):
    	super().__init__(int_rate, balance)
        self.is_roth = is_roth

# Let's look at another example. Suppose we wanted to add some logic to our withdraw method:

class RetirementAccount(BankAccount):
    def withdraw(self, amount, is_early):
    	if is_early:
    	    amount = amount * 1.10
    	if (self.balance - amount) > 0:
    	    self.balance -= amount
        else:
    	    print("INSUFFICIENT FUNDS")
    	return self

class BankAccount:
    def withdraw(self, amount):
    	if (self.balance - amount) > 0:
    	    self.balance -= amount
        else:
    	    print("INSUFFICIENT FUNDS")
    	return self


# repetitiveness here so let's call on the parent to do the part of the code that is the same:

class RetirementAccount(BankAccount):
    def withdraw(self, amount, is_early):
    	if is_early:
    	    amount = amount * 1.10
    	super().withdraw(amount)
    	return self

class BankAccount:
    def withdraw(self, amount):
    	if (self.balance - amount) > 0:
    	    self.balance -= amount
        else:
    	    print("INSUFFICIENT FUNDS")
    	return self
_______________________________________________________________________________________

# forms and POST form submissions
1) The first thing to do is to write a function that will show a page with a form on it.

from flask import Flask, render_template
app = Flask(__name__)
# our index route will handle rendering our form
@app.route('/')
def index():
    return render_template("index.html")
if __name__ == "__main__":
    app.run(debug=True)

2) That means our HTML page should have a form on it.

<h1>Index Page</h1>
<h3>Create a User</h3>
    <form action='/users' method='post'>
    Name: <input type='text' name='name'>
    Email: <input type='text' name='email'>
    <input type='submit' value='create user'>
</form>

# action attribute
# This is the route that will process the form (not the one that shows the form--that's # "/"). We'll set this up shortly.

# method attribute
# Our options are GET and POST; most likely, we'll want this to be a POST request (but if you don't set it, the default is GET)

# input elements
# These are the parts of the form that actually gather data from the user. Check here # for type options. Also check here for other form elements like select (dropdowns) and textarea. Each element should have a unique value for its name attribute.

# a way to submit the form
# This can either be <input type='submit'> or <button>Submit</button>, but NOT <input type='button'>.

3) We indicated above, with the action attribute, that this POST request would be handled with the route /users, so let's add this to our server:

from flask import Flask, render_template, request, redirect # added request

@app.route('/users', methods=['POST'])
def create_user():
    print("Got Post Info")
    print(request.form)
    name_from_form = request.form['name']
    email_from_form = request.form['email']
    return render_template("show.html", name_on_template=name_from_form, email_on_template=email_from_form)

Specifying Allowed Methods: methods=['POST']
If we don't provide a value for methods, only GET requests are allowed. Everything we've done up to this point have been GET requests, so it has been okay, but since we want this method to handle POST requests, we must specify that. Notice it is a list--it's possible to provide more than one value.

Accessing Data: request.form['name_of_input']
The name we gave to each HTML input was significant. On the server-side, we can access data that was input into a field from a user through the request.form dictionary by providing the name of the input as the key. To see what's in your request object, try printing request.form.

Lastly, note that the type of anything that comes in through request.form will be a "string" no matter what. If you want that value to be identified as an actual number you'll have to type cast it.

4) <h1>Show Page</h1>
<h3>Info Submitted:</h3>
    <p>Name: {{ name_on_template }}</p>
    <p>Email: {{ email_on_template }}</p>

______________________________________________________________________________________

# Redirecting: ALWAYS redirect after a POST request to avoid data being handled more than once.

# Let's add a separate method that will be solely responsible for rendering the show page, and then change the last line of our method handling the POST data from render_template to redirect to the route that will render the page

from flask import Flask, render_template, request, redirect # don't forget to import redirect!

@app.route('/users', methods=['POST'])
def create_user():
    print("Got Post Info")
    print(request.form)
    name = request.form['name']
    email = request.form['email']
    return redirect("/show")	# changed this line!

# adding this method
@app.route("/show")
def show_user():
    print("Showing the User Info From the Form")
    print(request.form)
    return render_template("show.html")

______________________________________________________________________________________

# HTTP request/response cycles are stateless. That means that each request/response cycle is independent and ignorant of all other requests, before or after.

# One form of persistent data is a session.

# In a given process (HTTP request/response), we can manage data (search terms and search results for instance) that outlives the process that generated it. This data is called state. State allows our site to "know" a lot of useful information, like:

- Whether there is a user logged in
- Who the current user is
- What links a user has viewed previously

# While hashed, cookies are not incredibly secure, so don't save anything private in them.

______________________________________________________________________________________

# Setting up session in Flask

from flask import Flask, render_template, request, redirect, session

# To use sessions in Flask, we are also required to give our app a secret key:
i.e.
app = Flask(__name__)
app.secret_key = 'keep it secret, keep it safe' # set a secret key for security purposes

# then, we can do this:
@app.route('/users', methods=['POST'])
def create_user():
    print("Got Post Info")
    # Here we add two properties to session to store the name and emailcopy
    session['username'] = request.form['name']
    session['useremail'] = request.form['email']
    return redirect('/show')

# Previously in our show_user function, we didn't have access to the name and email from the form submission. Now, because of session, we have a way to access the name and email in a different function!

***But know that, even though hidden inputs are invisible to the user, it is actually very visible in the page's source. That means other users can still see and change the values you set in the hidden input. So be very careful in choosing what data you store in there as value, and set appropriate actions if a user tries to change or remove it.***

______________________________________________________________________________________

# Setting up a Django app

1) django-admin startproject your_project_name_here

2) cd into your_project_name_here

3) python manage.py startapp your_app_name_here

4) include the app name in settings at the project level

5) update paths for urls.py at the project level to:
from django.urls import path, include

urlpatterns = [
    path('', include('app_name.urls'))
]

6) create a urls.py file in the app folder and add something like:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index)
]

7) make templates folder for html files and static folder for css, js, and images folders all at the app level

8) to use session and models:
  > python manage.py makemigrations
  > python manage.py migrate


9) #use app views.py to do orm stuff
# other imports
from .models import Movie
# show all of the data from a table
def index(request):
    context = {
    	"all_the_movies": Movie.objects.all()
    }
    return render(request, "index.html", context)

#from index.html

    <h1>All Movies</h1>
    <ul>
    {% for movie in all_the_movies %}
        <li>{{ movie.title }}</li>
    {% endfor %}
    </ul>

~
9) python manage.py shell

10) from app_name.models import app_class_name

11) CRUD
~

12) python manage.py runserver

*If everything fails, delete sqlite, migrations folder and py_cache. Then, python manage.py makemigrations app_name, python manage.py migrate, python manage.py runserver
______________________________________________________________________________________

# Routing in Django

# some_project/some_app/urls.py
urlpatterns = [
        path('bears', views.one_method),                        # would only match localhost:8000/bears
        path('bears/<int:my_val>', views.another_method),       # would match localhost:8000/bears/23
        path('bears/<str:name>/poke', views.yet_another),       # would match localhost:8000/bears/pooh/poke
    	path('<int:id>/<str:color>', views.one_more),           # would match localhost:8000/17/brown
]

# some_project/some_app/views.py
def one_method(request):                # no values passed via URL
    pass                                

def another_method(request, my_val):	# my_val would be a number from the URL
    pass                                # given the example above, my_val would be 23

def yet_another(request, name):	        # name would be a string from the URL
    pass                                # given the example above, name would be 'pooh'

def one_more(request, id, color): 	# id would be a number, and color a string from the URL
    pass                                # given the example above, id would be 17 and color would be 'brown'

# HttpResponse: Can be used to pass a string as a response.
# Redirect: Used to navigate to a different view method, before a final response is sent to the client. ***Note*** Even though we don't include the first / in our project urls.py file, when redirecting, you should provide the whole path, starting with the first /.
# JsonResponse: Used to return a JSON object
______________________________________________________________________________________

#Django Templates

# When we call the render function, our first argument will always be request, and the second argument will be a string indicating which html file to render.

from django.shortcuts import render	# notice the import!
def index(request):
    return render(request, "index.html")

# With Django, we are able to pass data to the template via the render method.  We do this by passing a single dictionary whose keys will be the variable names available on the template. For example:

#project_name/app_name/views.py
from django.shortcuts import render

def index(request):
    context = {
    	"name": "Noelle",
    	"favorite_color": "turquoise",
    	"pets": ["Bruce", "Fitz", "Georgie"]
    }
    return render(request, "index.html", context)

#project_name/app_name/templates/index.html
<h1>Info From Server:</h1>
<p>Name: {{name}}</p>
<p>Color: {{favorite_color}}</p>
<p>Pets</p>
<ul>
{% for pet in pets %}
   <li>{{pet}}</li>
{% endfor %}
</ul>

***Note: You cannot use square brackets with Django's template engine! Instead, use dot notation.

For example, array[0] becomes {{ array.0 }}***
______________________________________________________________________________________

# add static files

<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <title>Index</title>
      {% load static %}		<!-- added this line -->
      <link rel="stylesheet" href="{% static 'css/style.css' %}">    
      <script src="{% static 'js/script.js' %}"></script>
    </head>
    <body>
    	<img src="{% static 'images/image.jpg' %}" />
    </body>
______________________________________________________________________________________

# In Django we will utilize the request.POST to access any form data that is submitted. (If the form is a GET request, that data can be accessed with request.GET.)

from django.shortcuts import render, redirect
def some_function(request):
    if request.method == "GET":
    	print(request.GET)
    if request.method == "POST":
        print(request.POST)

______________________________________________________________________________________

CSRF Token:

# Add a token to each form with this line:

<form action="/some_route" method="post">
  {% csrf_token %}
  <p>Field One: <input name="one" type="(insert text)"></p>
  <p>Field Two: <input name="two" type="(insert text)"></p>
  <button type="submit">Submit</button>
</form>

# Remember that the names of the input fields from our form will be the keys we use to access the data in our server. So given the above form, we should be able to retrieve these values:

from django.shortcuts import render, redirect
def some_function(request):
    if request.method == "POST":
        val_from_field_one = request.POST["one"]
    	val_from_field_two = request.POST["two"]

______________________________________________________________________________________

# Accessing Data: request.POST['name_of_input']
# Note that the type of anything that comes in through request.post will be a "string" no matter what. If you want that value to be identified as an actual number you'll have to type cast it.

______________________________________________________________________________________

Sessions:
#use the command:
# (djangoPy3Env) project_name> python manage.py migrate

# Now we just need to refer to it in our views.py file.
# def some_function(request):
    request.session['name'] = request.POST['name']
    request.session['counter'] = 100

# it can also be pulled directly in Django templates:
# <p>Name in session is: {{request.session.name}}</p>

Useful Session Methods:
# request.session['key']
    - This will retrieve (get) the value associated with 'key'
# request.session['key'] = 'value'
    - Set the value that will be stored by 'key' to 'value'
# 'key' in request.session
    - Returns a boolean of whether a key is in session or not
# {{ request.session.name }}
    - Use dot notation (.) to access request.session keys from templates since square brackets ([]) aren’t allowed there
# del request.session['key']
    - Deletes a session key if it exists, throws a KeyError if it doesn’t. Use along with try and except since it's better to ask for forgiveness than permission

*** Note: If you are storing a list in session that is being modified (such as an append), you will need to save the session after the append, like so:
#    request.session['my_list'] = []
#    request.session['my_list'].append("new item")
#    request.session.save()

____________________________________________________________________________________________________
Django ORMs
# CharField
    - Any text that a user may enter. This has one required parameter, max_length, that is the maximum length of text that can be saved.
# TextField
    - Like a CharField, but with no maximum length. Your user could copy the entire text of the Harry Potter series into the field and it would save in the database correctly.
# IntegerField
    - Holds an integer value
# FloatField
    - Holds a float value; this is good for numbers with potentially varying numbers of decimal places
# DecimalField
    - This is a good field for a number with a fixed number of decimal places, like currency. There are 2 required parameters: max_digits refers to the total number of digits (before and after the decimal place), and decimal_places refers to how many decimal places.
# BooleanField
    - Holds a boolean value
# DateTimeField
    - Used for a combination of a specific date and time. This field can take two very useful optional parameters. Setting the auto_now_add argument to True adds the current date/time when an object is created. Setting auto_now=True automatically updates any time the object is modified.
*** Never delete migration files and always makemigrations and migrate anytime you change something in your models.py files – that's what updates the actual database so it reflects what's in your models.

____________________________________________________________________________________________________
Django Shell

# to use the shell from the project's root directory where manage.py is located:
> python manage.py shell

# Then run:
>>> from your_app_name_here.models import *
# in this case, we want the models
** import * is typically discouraged as it can interfere with namespace collisions, inefficient at importing big objects, and documentation is limited
**To remedy this, we typically import a few objects only:
# i.e.
    >>>from math import pi
    >>>pi
    >>>3.141592653589793
    >>> sin(pi/2)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'sin' is not defined

# or import the module under its namepsace:
  >>>import math
  >>>math.pi
  >>>3.141592653589793
  etc..

____________________________________________________________________________________________________
CRUD (creating, Reading, Updating, Deleting)
Creating a new record
    ClassName.objects.create(field1="value for field1", field2="value for field2", etc.)
Reading existing records
    Methods that return a single instance of a class
        ClassName.objects.first() - gets the first record in the table
        ClassName.objects.last() - gets the last record in the table
        ClassName.objects.get(id=1) - gets the record in the table with the specified id
            this method will throw an error unless only and exactly one record matches the query
    Methods that return a list of instances of a class
        ClassName.objects.all() - gets all the records in the table
        ClassName.objects.filter(field1="value for field1", etc.) - gets any records matching the query provided
        ClassName.objects.exclude(field1="value for field1", etc.) - gets any records not matching the query provided
Updating an existing record
    c = ClassName.objects.get(id=1)
    c.field_name = "some new value for field_name"
    c.save()
Deleting an existing record
    c = ClassName.objects.get(id=1)
    c.delete()
Other helpful methods
    Displaying records
        ClassName.objects.get(id=1).__dict__ - shows all the values of a single record as a dictionary
        ClassName.objects.all().values() - shows all the values of a QuerySet (i.e. multiple instances)
    Ordering records
        ClassName.objects.all().order_by("field_name") - orders by field provided, ascending
        ClassName.objects.all().order_by("-field_name") - orders by field provided, descending

____________________________________________________________________________________________________
    Ovverride __str__ to display something other than i.e. <Movie object (1)>:
    class Movie(models.Model):
    # fields removed for brevity
        def __str__(self):
         return f"<Movie object: {self.title} ({self.id})>"

_____________________________________________________________________________________________________
# Many to Many relationship
class Book(models.Model):
	title = models.CharField(max_length=255)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)
class Publisher(models.Model):
	name = models.CharField(max_length=255)
	books = models.ManyToManyField(Book, related_name="publishers")
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

# to update two existing records:
this_book = Book.objects.get(id=4)	# retrieve an instance of a book
this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher

# 2 options that does the same thing:
this_publisher.books.add(this_book)		# add the book to this publisher's list of books
# OR
this_book.publishers.add(this_publisher)	# add the publisher to this book's list of publishers

# to remove a relationship between two existing records
this_book = Book.objects.get(id=4)	# retrieve an instance of a book
this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher

# 2 options that do the same thing:
this_publisher.books.remove(this_book)		# remove the book from this publisher's list of books
# OR
this_book.publishers.remove(this_publisher)	# remove the publisher from this book's list of publishers
_____________________________________________________________________________________________________
Validations

# the new validation manager needs to be before the class with name(models.Model)

    # Inside your app's models.py file
from django.db import models
    # Our custom manager!
    # No methods in our new manager should ever receive the whole request object as an argument!
    # (just parts, like request.POST)
class BlogManager(models.Manager):
    def basic_validator(self, postData):
        errors = {}
        # add keys and values to errors dictionary for each invalid field
        if len(postData['name']) < 5:
            errors["name"] = "Blog name should be at least 5 characters"
        if len(postData['desc']) < 10:
            errors["desc"] = "Blog description should be at least 10 characters"
        return errors

    # Now to link our BlogManager to our Blog class, we are going to override the objects property and have it reference our newly created manager, like so:

class Blog(models.Model):
    name = models.CharField(max_length=255)
    desc = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    objects = BlogManager()    # add this line!

    # Now in our views.py file, we can use Blog.objects.basic_validator(postData):
    # Inside your app's views.py file
from django.shortcuts import render, HttpResponse, redirect
from django.contrib import messages

from .models import Blog
def update(request, id):
    # pass the post data to the method we wrote and save the response in a variable called errors
    errors = Blog.objects.basic_validator(request.POST)
        # check if the errors dictionary has anything in it
    if len(errors) > 0:
        # if the errors dictionary contains anything, loop through each key-value pair and make a flash message
        for key, value in errors.items():
            messages.error(request, value)
        # redirect the user back to the form to fix the errors
        return redirect('/blog/edit/'+id)
    else:
        # if the errors object is empty, that means there were no errors!
        # retrieve the blog to be updated, make the changes, and save
        blog = Blog.objects.get(id = id)
        blog.name = request.POST['name']
        blog.desc = request.POST['desc']
        blog.save()
        messages.success(request, "Blog successfully updated")
        # redirect to a success route
        return redirect('/blogs')

# In the HTML:
{% if messages %}
<ul class="messages">
    {% for message in messages %}
        <li {% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
    {% endfor %}
</ul>
{% endif %}

# Feel free to experiment with the BlogManager methods – any change you make to that class does not need to be migrated since it's not a database table.

_____________________________________________________________________________________________________
Regular expression (regex)

# example for email in models file:
import re	# the regex module
class BlogManager(models.Manager):
    def basic_validator(self, postData):
        errors = {}
        EMAIL_REGEX = re.compile(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$')
        if not EMAIL_REGEX.match(postData['email']):    # test whether a field matches the pattern            
            errors['email'] = "Invalid email address!"
        return errors

# Other validation tools:
    str.isalpha() -- returns a boolean that shows whether a string contains only alphabetic characters

    time.strptime(string, format) -- changes a string to a time using the given format

______________________________________________________________________________________

Bcrypt

# str.encode(): coverts unicode -> byte
# str.decode(): converts byte -> unicode

# checkpw to check is hashed passwords match
